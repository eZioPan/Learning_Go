-------- Chapter 1 --------


A1.1

package main

import "fmt"

func main() {
	for i := 0; i < 10; i++ {
		fmt.Println(i)
	}
}


A1.2

package main

import "fmt"

func main() {
	var i int = 0
I:
	if i < 10 {
		fmt.Println(i)
		i++
		goto I
	}
}


A1.3

package main

import "fmt"

var a [5]int = [5]int{2, 4, 6, 8, 0}

func main() {
	var i int = 0
	var l = len(a) - 1
I:
	if i <= l {
		fmt.Println(a[i])
		i++
		goto I
	}
}


A2.1

package main

import "fmt"

func main() {
	for i := 1; i <= 100; i++ {
		c1 := i % 3
		c2 := i % 5
		switch {
		case c1+c2 == 0:
			fmt.Print("FizzBuzz")
		case c1 == 0:
			fmt.Print("Fizz")
		case c2 == 0:
			fmt.Print("Buzz")
		default:
			fmt.Print(i)
		}
		fmt.Print(" ")
	}
}


A3.1

package main

import "fmt"

func main() {
	var s string
	for i := 1; i <= 100; i++ {
		s = ""
		for j := 1; j <= i; j++ {
			s = s + "A"
		}
		fmt.Println(s)
	}
}


A3.2

package main

import "fmt"

const s string = "asSASA ddd dsjkdsjs dk"

func main() {
	fmt.Println(len(s), " ", len(s))
}


A3.3

package main

import "fmt"

const s string = "asSASA ddd dsjkdsjs dk"

func main() {
	r := []rune(s)
	for i := 0; i < 3; i++ {
		r[i+3] = 'a' + rune(i)
	}
	fmt.Println(string(r))
}


A3.4

package main

import "fmt"

const s string = "foobar"

func main() {
	r := []rune(s)
	for i, j := 0, len(r)-1; i < j; i, j = i+1, j-1 {
		r[i], r[j] = r[j], r[i]
	}
	fmt.Println(s, " ", string(r))
}


A4.1

package main

import "fmt"

func main() {
	sl := []float64{1, 3, 5, 6, 7}
	var sum float64 = 0
	for _, v := range sl {
		sum += v
	}
	avg := sum / float64(len(sl))
	fmt.Println(avg)
}



-------- Chapter 2 --------


A5.1

package main

import "fmt"

func main() {
	fmt.Println(average([]float64{1.2, 3.4, 5.6}))
}

func average(s []float64) (avg float64) {
	l := len(s)
	var sum float64 = 0
	for i := 0; i < l; i++ {
		sum += s[i]
	}
	avg = sum / float64(l)
	return avg
}


A6.1

package main

import "fmt"

func main() {
	fmt.Println(sort2D(4, 2))
}

func sort2D(a, b int) (smaller, bigger int) {
	if a > b {
		smaller, bigger = b, a
	} else {
		smaller, bigger = a, b
	}
	return
}


A7.1

答：
第 9 行，在 for 语句块之外调用了 作用域 仅在 for 语句块之内的 变量 i


A8.1

package main

import "fmt"

type Stack []interface{}

func main() {
	var s Stack = Stack{1, 2, 3, 4}
	fmt.Println(pop(&s))
	push(5, &s)
	fmt.Println(pop(&s))
	fmt.Println(pop(&s))
}

func push(item interface{}, S *Stack) {
	*S = append(*S, item)
}

func pop(S *Stack) (item interface{}) {
	var l int = len(*S)
	item = (*S)[l-1]
	*S = (*S)[0 : l-1]
	return
}


A8.2_【未解决】

package main

import "fmt"

type Stack []interface{}

func main() {
	var s Stack = Stack{1, 2, 3, 4}
	fmt.Println(pop(&s))
	push(5, &s)
	fmt.Println(pop(&s))
	fmt.Println(pop(&s))
	fmt.Println(String(&s))
}

func push(item interface{}, S *Stack) {
	*S = append(*S, item)
}

func pop(S *Stack) (item interface{}) {
	var l int = len(*S)
	item = (*S)[l-1]
	*S = (*S)[0 : l-1]
	return
}

func String(S *Stack) string {
	var l int = len(*S)
	var dataString string
	for i := l; i >= 0; i-- {
		dataString = "[" + string(l-i) + ":" + string((*S)[i].(int)) + "\n"
	}
	return dataString
}
