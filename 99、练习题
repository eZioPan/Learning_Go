-------- Chapter 1 --------


A1.1

package main

import "fmt"

func main() {
	for i := 0; i < 10; i++ {
		fmt.Println(i)
	}
}


A1.2

package main

import "fmt"

func main() {
	var i int = 0
I:
	if i < 10 {
		fmt.Println(i)
		i++
		goto I
	}
}


A1.3

package main

import "fmt"

var a [5]int = [5]int{2, 4, 6, 8, 0}

func main() {
	var i int = 0
	var l = len(a) - 1
I:
	if i <= l {
		fmt.Println(a[i])
		i++
		goto I
	}
}


A2.1

package main

import "fmt"

func main() {
	for i := 1; i <= 100; i++ {
		c1 := i % 3
		c2 := i % 5
		switch {
		case c1+c2 == 0:
			fmt.Print("FizzBuzz")
		case c1 == 0:
			fmt.Print("Fizz")
		case c2 == 0:
			fmt.Print("Buzz")
		default:
			fmt.Print(i)
		}
		fmt.Print(" ")
	}
}


A3.1

package main

import "fmt"

func main() {
	var s string
	for i := 1; i <= 100; i++ {
		s = ""
		for j := 1; j <= i; j++ {
			s = s + "A"
		}
		fmt.Println(s)
	}
}


A3.2

package main

import "fmt"

const s string = "asSASA ddd dsjkdsjs dk"

func main() {
	fmt.Println(len(s), " ", len(s))
}


A3.3

package main

import "fmt"

const s string = "asSASA ddd dsjkdsjs dk"

func main() {
	r := []rune(s)
	for i := 0; i < 3; i++ {
		r[i+3] = 'a' + rune(i)
	}
	fmt.Println(string(r))
}


A3.4

package main

import "fmt"

const s string = "foobar"

func main() {
	r := []rune(s)
	for i, j := 0, len(r)-1; i < j; i, j = i+1, j-1 {
		r[i], r[j] = r[j], r[i]
	}
	fmt.Println(s, " ", string(r))
}


A4.1

package main

import "fmt"

func main() {
	sl := []float64{1, 3, 5, 6, 7}
	var sum float64 = 0
	for _, v := range sl {
		sum += v
	}
	avg := sum / float64(len(sl))
	fmt.Println(avg)
}



-------- Chapter 2 --------


A5.1

package main

import "fmt"

func main() {
	fmt.Println(average([]float64{1.2, 3.4, 5.6}))
}

func average(s []float64) (avg float64) {
	l := len(s)
	var sum float64 = 0
	for i := 0; i < l; i++ {
		sum += s[i]
	}
	avg = sum / float64(l)
	return avg
}


A6.1

package main

import "fmt"

func main() {
	fmt.Println(sort2D(4, 2))
}

func sort2D(a, b int) (smaller, bigger int) {
	if a > b {
		smaller, bigger = b, a
	} else {
		smaller, bigger = a, b
	}
	return
}


A7.1

答：
第 9 行，在 for 语句块之外调用了 作用域 仅在 for 语句块之内的 变量 i


A8.1
## 仅针对数学意义上的数组有效

package main

import "fmt"

type Stack []int

func main() {
	var s Stack = Stack{1, 2, 3, 4}
	fmt.Println(pop(&s))
	push(5, &s)
	fmt.Println(pop(&s))
	fmt.Println(pop(&s))
}

func push(item int, S *Stack) {
	*S = append(*S, item)
}

func pop(S *Stack) (item int) {
	var l int = len(*S)
	item = (*S)[l-1]
	*S = (*S)[0 : l-1]
	return
}


A8.2
## 仅针对数学意义上的数组有效

package main

import (
	"fmt"
	"strconv"
)

type Stack []int

func main() {
	var s Stack = Stack{1, 2, 3, 4}
	fmt.Println(pop(&s))
	push(5, &s)
	fmt.Println(pop(&s))
	fmt.Println(pop(&s))
	fmt.Println(String(&s))
}

func push(item int, S *Stack) {
	*S = append(*S, item)
}

func pop(S *Stack) (item int) {
	var l int = len(*S)
	item = (*S)[l-1]
	*S = (*S)[0 : l-1]
	return
}

func String(S *Stack) string {
	var l int = len(*S)
	var dataString string
	for i := l - 1; i >= 0; i-- {
		dataString += "[" + strconv.Itoa(l-i) + ":" + strconv.Itoa((*S)[i]) + "]\n"
	}
	return dataString
}


A9.1

package main

import "fmt"

func main() {
	intList(1, 2, 3, 4, 5)
}

func intList(args ...int) {
	for _, v := range args {
		fmt.Println(v)
	}
}


A10.1

package main

import (
	"fmt"
)

func main() {
	fmt.Println(Fibonacci(10, 2, 6))
}

func Fibonacci(x0, x1, length int) (seq []int) {

	if x0 > x1 {
		fmt.Println("first number is greater than second,interchanged")
		x1, x0 = x0, x1
	}
	seq = append(seq, x0, x1)
	for i := 1; i < length; i++ {
		x0, x1 = x1, x0+x1
		seq = append(seq, x1)
	}
	return seq
}


A11.1

package main

import (
	"fmt"
)

func main() {
	fmt.Println(MyMap(plusOne, []int{1, 2, 3}))
}

func MyMap(f func(int) int, intL []int) (rIntL []int) {
	for _, v := range intL {
		rIntL = append(rIntL, f(v))
	}
	return
}

func plusOne(a int) (b int) {
	b = a + 1
	return
}


A11.2

package main

import (
	"fmt"
)

func main() {
	fmt.Println(MyMap(plusOne, []string{"x", "y", "z"}))
}

func MyMap(f func(string) string, intL []string) (rIntL []string) {
	for _, v := range intL {
		rIntL = append(rIntL, f(v))
	}
	return
}

func plusOne(a string) (b string) {
	b = a + "1"
	return
}


A12.1

package main

import (
	"fmt"
)

func main() {
	fmt.Println(Max([]int{1, 2, 3, 4, 5}))
}

func Max(l []int) (max int) {
	max = l[0]
	for _, v := range l {
		if max < v {
			max = v
		}
	}
	return max
}


A12.2

package main

import (
	"fmt"
)

func main() {
	fmt.Println(Min([]int{1, 2, 3, 4, 5}))
}

func Min(l []int) (min int) {
	min = l[0]
	for _, v := range l {
		if min > v {
			min = v
		}
	}
	return min
}


A13.1

package main

import "fmt"

func main() {
	fmt.Println(bubble([]int{9, 8, 7, 6, 5, 3, 4, 2, 1}))
}

func bubble(orignalList []int) []int {
	l := len(orignalList)
	for i := 0; i < l; i++ {
		for j := 0; j < l-i-1; j++ {
			if orignalList[j] > orignalList[j+1] {
				orignalList[j], orignalList[j+1] = orignalList[j+1], orignalList[j]
			}
		}
	}
	return orignalList
}


A14.1

package main

import "fmt"

func main() {
	p := plusTwo()
	fmt.Println(p(2))
}

func plusTwo() (rf func(int) int) {
	rf = func(a int) (b int) {
		b = a + 2
		return
	}
	return
}


A14.2

package main

import "fmt"

func main() {
	p := plusX(5)
	fmt.Println(p(2))
}

func plusX(x int) (rf func(int) int) {
	rf = func(a int) (b int) {
		b = a + x
		return
	}
	return
}



-------- Chapter 3 --------


A15.1

package stack

import "strconv"

type Stack []int

func (S *Stack) Push(item int) {
	*S = append(*S, item)
}

func (S *Stack) Pop() (item int) {
	var l int = len(*S)
	item = (*S)[l-1]
	*S = (*S)[0 : l-1]
	return
}

func (S *Stack) String() string {
	var l int = len(*S)
	var dataString string
	for i := l - 1; i >= 0; i-- {
		dataString += "[" + strconv.Itoa(l-i) + ":" + strconv.Itoa((*S)[i]) + "] "
	}
	return dataString
}


A15.2

package stack

import (
	"fmt"
	"testing"
)

var s1 *Stack = &Stack{1, 2, 3, 4, 5, 6}

func Test_Pop(t *testing.T) {
	if s1.Pop() != 6 {
		t.Fatal("Pop Error")
	}
}

func Test_Push(t *testing.T) {
	s1.Push(7)
	sE := Stack{1, 2, 3, 4, 5, 7}
	if len(*s1) != len(sE) {
		t.Fatal("Push Falied: Wrong Stack Count")
	} else {
		for i := range *s1 {
			if (*s1)[i] != sE[i] {
				t.Fatal("Push Failed: Wrong Value")
			}
		}
	}
}

func Example_Stringer() {
	fmt.Println(s1)
	// Output:
	// [1:7] [2:5] [3:4] [4:3] [5:2] [6:1]
}


A16.1
【做法未知，跳过】



-------- Chapter 4 --------


A17.1

所有的数字类型，以及数字类型的别名


A17.2

其他类型无法数值+1


A18.1

【未学习 interface 跳过】


A19.1

p1 直接存储了 Person 类型的对象
p2 存储了指向 Person 类型对象的指针


A19.2

第一个传入了将要传入的变量的内存地址
第二个取得了传入变量的拷贝值的内存地址


A20.1

???


A20.2

???


A21.1

???


A22.1

k1: vector.IntVector
k2: *vector.IntVector
k3: *vector.IntVector


A22.2
自动解析
