函数的定义

func <函数名> ([[<形式参数1>] <形参1类型>][, [<形式参数2>] <形参2类型>]... ) ([[返回值名1] <返回值1类型>][, [返回值名2] <返回值2类型>]...){ [执行语句块] }

1、 函数的申明由 func 关键字指定

2、func 关键字后跟随该函数的 函数名

3、使用括号引起需要传入的参数

3.0、所有参数均以值拷贝的方式传入函数

3.1、若没有参数，也需要用空的括号表示
eg.
func myfunc() {}

3.2、形式参数不接受默认参数设置

3.3、形式参数在执行函数头是就已经初始化完毕了

3.4、形式参数名后必须指明其类型
eg.
func myfunc(a int) {}

3.5、可只注明形参类型而舍弃形参名，但不可两者混用
eg.
func myfunc(int) {}

3.6、多个形式参数用逗号隔开
eg.
func myfunc(a int, b int, c float64) {}

3.7、多个同相邻的同类型形式参数可以缩写类型
eg.
func myfunc(a,b int, c float64) {}

3.8、不需要赋予形参的传入值，可以用 _ 表示
eg.
func myfunc(a,_ int, c float54) {}

3.9、在形参的最后可以使用 ...<类型> 的方式定义不定长度的参数，也就是变参
	这些参数将作为该类型的 切片 传入函数中
	一个函数只能在参数的最后定义一个 不定长参数
eg.
func myfunc(a int, l ...int) {}

4、一个函数可以没有返回值

4.0、若一个函数有返回值，则该返回值在函数头执行时就被初始化了

4.1、若函数只有一个返回值，且返回值没有名称，则可以省略括号
eg.
func myfunc(a int) string {}

4.2、一个函数可以返回多个值，多个值用括号括起来
eg.
func myfunc(a int) (string, bool) {}

4.3、返回值可以有名字，若返回值有名字，则在使用 return 语句的时候，可以省略返回变量名
eg.
func myfunc(a int32) (name string, ok bool) {
	name = string(a)
	ok = true
	return
}

5、大括号内是函数的执行语句

5.1、一个函数可以没有大括号，或者只有一个空的大括号

5.2、一个函数可以含有 renturn 语句返回一些值，也可以没有任何返回值

5.3、若函数头已经声明而来函数的返回值名称，则只需在语句块中对对应的变量赋值，在 return 处不需要指明它们
