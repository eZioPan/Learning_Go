并发（Concurrent） 与 并行（Parallel）

并发，指的是一个程序被设计为，可以同时启动多个独立控制流程的模式
	 在这种设计模式下，会出现多条控制流程
	 而程序可以掌握控每个制流程的启动、运行、暂停、切换、结束等等状态
	 并发并不意味着在同一个时间点上，有多个控制流程正在执行

并行，指在同一个时间，的确有超过一个以上的控制流程被执行

可以说，并发是并行的基础，但并发不代表并行



Go 语言通过 goroutine 来执行并发

goroutine 的简单定义
goroutine 是与其他 goroutine 相对独立执行，且处在相同的地址空间的函数

goroutine 是一个函数，它以关键字 go 作为开头

EG.
ready("Tea",2)		// 普通的函数调用
go ready("Tea",2)	// 作为 goroutine 执行



一个简单的并发例子：

EG:
// 本包通过 gotoutine 打印 0 至 50 这 51 个数字
package main

import (
	"fmt"
	"strconv"
)

// 定义一个要在 goroutine 中执行的函数
func span(w string) {
	fmt.Printf("%#v", w)
}

func main() {
	for i := 0; i <= 50; i++ {
		go span(strconv.FormatInt(int64(i), 10))	// 使用关键字 Go 启动一个 goroutine
	}
}


我们可以发现
1、程序是乱序打印数字的，说明 go 关键字的确成功造成了并发的效果
2、需要打印的数字的个数远远小于应该打印的个数
   这是因为 main 函数在其他 goroutine 还没有全部返回的时候就结束运行了
   于是没有运行完的 goroutine 就被立刻中断了


改进的并发例子：

EG2.【手动让 main 函数等待 goroutine 执行完毕】

// 本包通过 goroutine 打印 0 至 50 这 51 个数字
// 并手动使主程序等待 goroutine 返回
package main

import (
	"fmt"
	"strconv"
	"time"
)

// 定义一个要在 goroutine 中执行的函数
func span(w string) {
	fmt.Printf("%#v", w)
}

func main() {
	for i := 0; i <= 50; i++ {
		go span(strconv.FormatInt(int64(i), 10)) // 使用关键字 Go 启动一个 goroutine
	}
	time.Sleep(3 * time.Second) // 手动让 main 函数等待一段时间
}


这次所有 goroutine 的返回值都收到了


但是在绝大多数并行程序中，我们并不知道 goroutine 会运行多久
所以手动让 main 函数等待的做法并不可取
