包是一系列 函数 和 值 的集合

包由源码文件开始处的  package <包名称>  定义

约定俗成的，包名中不出现大写字母

包名 和 源码文件名 可以不同，Go 在调用包的时候，以 包名 为准

一个包可以由多个源码文件组成，只要这些文件指向同一个包名

一般来说，同一层目录下的源码文件指向同一个包名，且目录名也可以和包名不同

使用 import <包路径> 来导入包

包的起始搜索路径为 $GOROOT/src/ 和 $GOPATH/src/

包路径的开头 省略起始搜索路径，结束于 指定包源码文件 所在的目录名

包中的函数，只要函数名的首字母是大写的，
就是“倒出的”（“exported”），可被其他包调用的；
否则就是“非倒出的”（“unexported”），不可被其他包调用的

包中函数的调用方法 <包名>.<函数>

EG.

文件 $GOPATH/src/packA/fileB.go

package stringZ					// 目录在 packA 下，文件名为 fileB，包名为 stringZ
								// 不是 main 包，没有 main 函数，不是程序的入口包

func Get() string {				// 定义了一个首字母大写的 Get 函数
	return "Z"
}

文件 $GOPATH/src/run.go

package main					// main 包，程序的入口包

import (
	"fmt"
	"packA"
)

func main() {					// main 函数，程序的入口函数
	fmt.Println(stringZ.Get())
}



包中的 新类型 和 全局变量 都是 首字母大写 即为倒出 类型 和 全局变量



import <包简称> <包路径> 另取一个包名



包的文档


若一段注释出现在  package <包名>  前，且两者之间没有空行，则该注释为 该 package 的文档

在非 main 包中，所有出现在 倒出函数、新类型代码块、全局变量代码块、全局常量代码块 前，且两者之间没有空行的注释
				都为该 倒出函数、新类型代码块、全局变量代码块、全局常量代码块 的文档

在非 main 包中，所有 新类型代码块、全局变量代码块、全局常量代码块 的内容，都会出现在包文档中



包的测试—— testing 包 简介
*注：*_test.go 源码文件不会在 go build 时编译

虽然 Go 语言在 Go 1.8 时依旧没有断点调试工具，但有 testing 包 以及 go test 命令 进行 以 函数 为最小单位的单元测试


单元测试执行的逻辑

0、现有一些需要测试的源码包，以及源码包中的函数

1、新写一个测试用的测试文件
	该文件可以访问需要测试的源码包中的函数和数据
	并需要引入 Go 语言定义的测试框架

1.1、测试文件需要定义一些可以用来被执行的函数
	这些函数被用于执行测试，
	我们需要在测试函数中 定义出预期结果
	并标记出执行结果中不符合预期的结果

2、使用 go test 执行测试，并返回执行结果


要进行 单元测试，必须具有以下三个因素

1、具有名为 *_test.go 的源码文件
	该文件用于写入单元测试的内容

2、*_test.go 文件中必须导入名为 testing 的包

3、import 要测试的包
	或者对于单个包
	直接 package <要测试的包名> 来测试包中包括私有函数在内的所有函数


testing 包的三个重要的函数（名）——三个重要的测试工具


单元测试函数：

func TestXxx(*testing.T)

以 Test 为函数名的开头，后面紧接非小写字母的字符（大写字母、数字、符号，等等）


单元性能测试：

func BenchmarkXxx(*testing.B)

以 Test 为函数名的开头，后面紧接非小写字母的字符（大写字母、数字、符号，等等）


单元样例测试（会出现在 GoDoc 里面）：

func ExampleXxx()

以 Test 为函数名的开头，后面紧接非小写字母的字符（大写字母、数字、符号，等等）


testing 包的四个最常见的方法


func (*testing.T) Fail() 或 func (*testing.B) Fail()

若对应的对象执行了 Fail() 方法，则该对象被标记为 失败
但剩余的测试代码会继续执行


func (*testing.T) FailNow() 或 func (*testing.B) FailNow()

若对应的对象执行了 FailNow() 方法，则该对象被标记为 失败
并立刻中断 该对象 剩余所有的测试代码
跳转至其他 测试对象的 代码，并执行测试


func (*testing.T) Log(args ...interface{}) 或 func (*testing.B) Log(args ...interface{})

将 传入 该方法的参数 格式化输出至 错误日志中
错误日志在该对象测试完成后从 os.Stdout 输出


func (*testing.T) Fatal(args ...interface{}) 或 func (*testing.B) Fatal(args ...interface{})

等价于先执行 Log() 接着执行 FailNow()


EG.

待测试文件 $GOPATH/src/Adder/run.go

package adder

func Add(a, b int) (r int) {
	r = a + b
	return
}


测试文件 $GOPATH/src/Adder/run_test.go

package adder						// 直接将 *_test.go 代码插入原始的 adder 包中

import (
	"fmt"							// 若要使用 Example 请务必
	"testing"						// 导入测试框架
)

func Test_Add(t *testing.T) {		// 使用特殊的关键字
	if Add(1, 2) != 3 {				// 判断执行结果是否和预期相同
		t.Log("1+2 != 3 ???")		// 写入该对象的日志信息
		t.Fail()					// 手动标记该对象处于失败状态
	}
}

func Example_Add() {
	fmt.Print(Add(1, 2))			// 一定要使用 fmt 包 中的 Print/Println/Printf 函数（立刻打印数值至 StdOut）
									// 不能使用 builtin 包中的 print/println 函数（等待程序全部执行结束才输出至 StdErr）
	// Output:						// 该函数最后一个注释为 Output: 或者 Unorder output: 时
	// 3							// Example 检查测试函数的打印值是否和注释的一致，若不一致则 标注 测试失败
}

func Benchmark_Add(b *testing.B) {
	for i := 0; i < b.N; i++ {		// b.N 表示测试将执行的次数，这个数会依据被测函数的运算速度自动修改，直至获取稳定的数据
		Add(i, i)
	}
}

执行函数

// 执行目录下所有的测试（不含 Benchmark）
go test

// 执行目录下有的测试（含有所有的 Benchmark）
go test -bench .

// 分析目录下所有测试代码的覆盖率
go test -cover



除了上述重要的 TestXxx BenchmarkXxx ExsampleXxx 之外，还有一个重要的方法函数为 TestMain

由于 go test 会自动执行 *_test.go 文件中匹配上的函数，所以并不好 控制测试流程/执行测试初始化/执行测试结束后语句

此时使用 func TestMain(*testing.M) 来引导 go test 执行 *_test.go 中的函数

func TestMain(m *testing.M){
	/* 一些额外的代码 */
	/* Blah Blah Blah */

	m.Run()			// 执行主测试

	/* 一些额外的代码 */
	/* Blah Blah Blah */
}

