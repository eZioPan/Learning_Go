fmt 包实现了与 C 的 printf 和 scanf 函数相同的格式化 IO
格式化“动词（verb）” 由 C 引申而来，且更加简单



打印（Printing）

格式化动词

通用

	%v		值的默认格式化
			当打印结构体时，加号标识（%+v）会加上字段名称
	%#v		Go 风格的值表示
	%T		Go 风格的值的类型的表示
	%%		确切表示一个百分号


布尔值

	%t		单词 true 或 false


整型【以 int 10 为例子】

	%b		二进制值【输出 1010】
	%c		数字所定义的 Unicode 码点的字符表示【输出了一个换行符】
	%d		十进制【输出 10】
	%o		八进制【输出 12】
	%q		符合 Go 语法的，将数字表示的字符安全转义之后的，用单引号引起的输出字符【输出 '\n'】
	%x		十六进制，小写 a-f【输出 a】
	%X		十六进制，大写 A-F【输出 A】
	%U		数字的 Unicode 表示【输出 U+000A】


浮点数和复数

	%b		无小数的科学计数法，为 2 的幂
			依照 strconv.FormatFloat 的 “b” 样式设计
	%e		科学计数法，小 e 标记
	%E		科学计数法，大 E 标记
	%f		含小数点但无指数
	%F		同 %F
	%g		对于大指数使用 %e，其他使用 %f
	%G		对于大指数使用 %E，其他使用 %F


字符串和 []byte

	%s		未解析的 字符串字节流 或者 slice 字节流
	%q		符合 Go 语法的，将字符安全转义之后的，用双引号引起的输出字符串
	%x		十六进制，小写，两个字符转换为一个字节
	%X		十六进制，大写，两个字符转换为一个字节


指针

	%p		十六进制标记，前序 0x


%v 所对应的每种类型的默认参数

	布尔值			%t
	整型				%d
	无符号整型		%d，若使用 %#v 则输出 %#x
	浮点数和复数		%g
	字符串			%s
	通道				%p
	指针				%p


对于复合对象，对其中元素递归使用以下规则，入下所示：

	struct				{field0 field1 ...}
	array slice			[elem0 elem1 ...]
	map					map[key0:value0 key1:value1 ...]
	上述对象的 pointer	&{}， &[], &map[]


宽度值是一个可选值，其紧接在“动词”之前的十进制数
若缺少宽度值，则使用最小的可表示该值的宽度
精度值是紧跟在宽度之后的一个可选十进制值，精度值和宽度值之间用小数点隔开
若没有小数点出现，则使用默认的精度值
小数点后没有跟随任何值表示进精度值为 0
举例：
	%f		默认宽度，默认精度
	%9f		宽度值 9，默认精度
	%.2f	默认宽度，精度值 2
	%9.2f	宽度值 9，精度值 2
	%9.f	宽度值 9，精度值 0


宽度值和精度值的单位是单个 Unicode 码点，也就是 rune 数量（不同地，C 的 printf 使用 byte 作为单位）
任何一个标示都可以使用字符 * 代替，也就是从紧邻的操作中获取，而下一个操作所读取的数必须是 int 类型
